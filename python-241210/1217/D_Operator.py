# D_Operator

# === 비트 연산자 ===

# bit
# : 이진 숫자 체계에서 가장 작은 데이터 단위 (0 OR 1)

# 비트 연산자
# : 정수(10진법)를 이진수로 표현했을 때 각 비트(bit) 단위로 연산을 수행

# 1 byte = 8 bit (2의 8제곱, 256)

# 60 (10진법 숫자) == 0011 1100 (2진법)
# 13 (10진법 숫자) == 0000 1101 (2진법)
a = 60
b = 13

# 1. 비트 and 연산자 (& - 앰퍼샌드)
# : 각 비트를 비교해 모두 1이면 1을 반환, 그외에는 0을 반환
print(a & b) # 12 - 0000 1100

# cf) 2진법을 10진법으로 바꾸는 방법
#       : 오른쪽 끝부터 자릿수가 2^0, 2^1, 2^2, ... 승수가 1씩 증가
#       : 전제 8자리를 2의 제곱으로 표현한 후 해당 값을 모두 더함

# 2. 비트 or 연산자 (| - vertical bar)
# : 각 비트를 비교해 하나라도 1이면 1을 반환, 그외에는 0을 반환
#   - 모두 0일 경우에만 0을 반환
print(a | b) # 61 - 0011 1101

# cf) 60 - 0011 1100

# 3. 비트 xor 연산자 (^ - 캐럿)
# : 각 비트를 비교해서 서로 다르면 1, 같으면 0을 반환
print(a ^ b) # 49 - 0011 0001

# 4. 비트 not 연산자 (~ - 물결)
# : 각 비트를 반전
# : 수의 기호까지 반전 (양수 > 음수)

# a = 60 (10진법 숫자) == 0011 1100 (2진법)
print(~a) # -61 - 1100 0011

# cf) 비트 not 연산자의 경우 1의 보수 상태를 사용: 모든 비트를 반전
#       이후 2의 보수 방법을 사용하여 1의 보수에 1을 더하게 됨
a = 60
print(bin(a)) # 0b111100
print(bin(~a)) # 0b-111101
print(~a) # -61

# 비트 연산자 사용 목적 #
# 1. 성능 최적화
#       : 매우 빠른 연산 처리 - 대량의 데이터 처리나 성능 처리에 유용
# 2. 알고리즘 구현
#       : 암호화, 압축, 그래픽 처리 등에서 비트 연산을 사용