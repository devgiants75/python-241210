# a_class.py
#* vsc에서는 파일 확장자를 반드시 표기!

# === 객체 & 클래스 ===

#! 객체란?
# : 서로 많은 데이터를 하나로 묶어서 표현한 것
# : 현실 세계의 사물이나 개념을 프로그램 내에서 표현한 것

# EX) 웹 페이지에 작성하는 '게시글'
# : 게시글 번호, 작성자, 제목, 내용, 작성일자, 수정일자 ... 등
# >> 데이터(속성)
# : 위 데이터를 처리하는 기능
# >> 기능(메서드 - 게시글 저장, 수정, 삭제, 조회 등)

#! 클래스란?
# : 객체를 만드는 도구(틀, 템플릿)
# : 클래스를 정의하면서 해당 클래스에 속한 객체들이 가져야 할 속성과 메서드를 명시

#! 인스턴스란?
# == '객체'
# : 클래스에 의해 생성되어 '메모리에 할당'된 객체
# : 클래스로부터 객체를 생성하는 과정 >> 인스턴스화

#? 객체, 클래스, 인스턴스의 관계
# 붕어빵 틀(클래스)에 의해 각각의 붕어빵(객체 object == 인스턴스 instance)이 만들어짐
# : 붕어빵 틀로 붕어빵을 만드는 것을 인스턴스화

#? 실생활 예시
# '이승아'는 '사람' 클래스의 인스턴스
# 'BMW'는 '자동차' 클래스의 인스턴스
# '파이썬'은 '프로그래밍 언어'클래스의 인스턴스
# '진라면'은 '라면'클래스의 인스턴스

#! 클래스 정의
# == 클래스를 생성한다
# : class 키워드로 클래스를 정의
# : Upper(대문자)CamelCase(이어지는 단어의 첫 글자를 대문자로 구분)
# MyBestFriend

# cf) 파이썬의 변수, 함수 명명규칙: lower(소문자)_snake_case(이어지는 단어를 언더스코어로 구분)
# my_best_friend

# : 클래스 기본 형식 - 들여쓰기 문법을 따름 (중괄호 사용 X)
'''
class 클래스명:
    본문(클래스의 상세 정의 - 속성, 메서드 등)
'''

# 속성(변수): 데이터를 표현
# 메서드(함수): 클래스가 수행할 수 있는 행동을 정의

#? 클래스 정의 예시
class FishBread: # 붕어빵 틀 (클래스)
    pass # 아무런 정의없이 클래스를 생성 (아무런 동작도 수행할 수 X)

#! 객체 생성
# : 클래스 이름 뒤에 소괄호를 붙여 호출하면
#       , 해당 클래스의 인스턴스(객체)가 생성
# 객체명(변수) = 클래스명()

# 객체1 = 클래스명()
# 객체2 = 클래스명()

#? 객체 생성 예시
bread1 = FishBread()
bread2 = FishBread()

print(bread1) # <__main__.FishBread object at 0x000001E71A796900>
print(bread2) # <__main__.FishBread object at 0x000001E71A9B0910>

# 실행 단축키: ctrl + f5

# 객체는 인스턴스화 된 메모리 상의 특정 주소에 할당됨.
# : 객체가 저장된 메모리 주소